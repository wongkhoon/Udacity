1
00:00:00,000 --> 00:00:02,955
If you open your terminal and type python,

2
00:00:02,955 --> 00:00:04,950
you should see something like this.

3
00:00:04,950 --> 00:00:08,464
This is the python interactive interpreter.

4
00:00:08,464 --> 00:00:11,935
You can type here to interact with Python directly.

5
00:00:11,935 --> 00:00:13,394
You just type your code,

6
00:00:13,394 --> 00:00:17,634
press enter and the output will appear on the following line.

7
00:00:17,635 --> 00:00:22,080
This is a good place to experiment and try bits of Python code at a time.

8
00:00:22,079 --> 00:00:26,234
Notice here, I didn't have to print the type to see the output.

9
00:00:26,234 --> 00:00:28,875
In the interpreter, the value of the last line

10
00:00:28,875 --> 00:00:31,695
in a prompt will be outputted automatically.

11
00:00:31,695 --> 00:00:35,210
If you had multiple lines where you'd want output values,

12
00:00:35,210 --> 00:00:36,825
you'd still have to print.

13
00:00:36,825 --> 00:00:39,495
If you start to define a function,

14
00:00:39,494 --> 00:00:45,155
you will see a change in the prompt to signify that this is a continuation line.

15
00:00:45,155 --> 00:00:50,024
You'll have to include your own indentation as you defined the function.

16
00:00:50,024 --> 00:00:53,699
A drawback of the interpreter is that it's tricky to edit code.

17
00:00:53,700 --> 00:00:55,410
If you made a mistake when typing

18
00:00:55,409 --> 00:00:58,439
this function or forgot to indent the body of the function,

19
00:00:58,439 --> 00:01:02,085
you can't use a mouse to click your cursor where you want it.

20
00:01:02,085 --> 00:01:05,250
You have to navigate with the arrow keys to move

21
00:01:05,250 --> 00:01:09,254
the cursor forwards and backwards to the line itself for editing.

22
00:01:09,254 --> 00:01:11,969
It would be helpful for you to learn useful shortcuts

23
00:01:11,969 --> 00:01:15,474
for actions like moving to the beginning or end of the line.

24
00:01:15,474 --> 00:01:21,454
Notice, I can reference any objects I defined earlier in the interpreter.

25
00:01:21,454 --> 00:01:25,875
One useful trick is using the up and down arrow

26
00:01:25,875 --> 00:01:29,545
to cycle through your recent commands at the interactive prompt.

27
00:01:29,545 --> 00:01:34,599
This can be useful to rerun or adapt code you've already tried.

28
00:01:34,599 --> 00:01:37,114
To quit the python interactive interpreter,

29
00:01:37,114 --> 00:01:41,280
use the command exit with parentheses or hit control

30
00:01:41,280 --> 00:01:46,379
D on mac or linux or control Z and enter for Windows.

31
00:01:46,379 --> 00:01:51,579
There's actually a really good alternative to the default python interpreter.

32
00:01:51,579 --> 00:01:55,900
IPython which comes as many additional features like

33
00:01:55,900 --> 00:01:58,675
tab completion which completes words for you

34
00:01:58,674 --> 00:02:02,590
or shows what options are available if there are multiple.

35
00:02:02,590 --> 00:02:07,570
This can be useful if you want to see what methods are available for an object.

36
00:02:07,569 --> 00:02:12,715
Another useful check is this question mark to get details about a particular object.

37
00:02:12,715 --> 00:02:17,400
I can quickly see what this function does without looking up the documentation.

38
00:02:17,400 --> 00:02:20,110
You can also execute system show commands using

39
00:02:20,110 --> 00:02:26,050
an exclamation point and some common ones don't even require it.

40
00:02:26,050 --> 00:02:29,590
You can learn more about IPython in the notes below.

41
00:02:29,590 --> 00:02:35,045
Using an interpreter can be really helpful for experimenting and testing python code.

42
00:02:35,044 --> 00:02:38,134
Those not necessarily just for experimentation.

43
00:02:38,134 --> 00:02:40,479
I also used an interpreter when I want to quickly

44
00:02:40,479 --> 00:02:43,000
investigate or modify files using Python.

